<link rel="stylesheet" href="/css/style.css">

<h1>{{title}}</h1>

<div id="error-message" class="error-message" style="display: none;"></div>

<div class="cart-header">
    <div class="cart-header-left">
        <a href="/api/products" class="continue-shopping-btn">‚Üê Continue Shopping</a>
        <div class="cart-id-display">Cart ID: {{cart._id}}</div>
    </div>
    {{#if cart.products.length}}
        <button onclick="emptyCart('{{cart._id}}')" class="empty-cart-btn">Empty Cart</button>
    {{/if}}
</div>

<div class="cart-container">
    {{#if cart.products.length}}
        <input type="hidden" id="cartId" value="{{cart._id}}">
        {{#each cart.products}}
            <div class="cart-item">
                <h3>{{this.product.title}}</h3>
                <p>Code: {{this.product.code}}</p>
                <p class="price">Price: ${{this.product.price}}</p>
                <p class="quantity">Quantity: {{this.quantity}} ({{this.product.stock}} available)</p>
                <p class="subtotal">Subtotal: ${{multiply this.product.price this.quantity}}</p>
                <button onclick="removeFromCart('{{this.product._id}}')" class="remove-btn">Remove</button>
                <div class="quantity-controls">
                    <button onclick="updateQuantity('{{this.product._id}}', {{this.quantity}} - 1)">-</button>
                    <span>{{this.quantity}}</span>
                    <button onclick="updateQuantity('{{this.product._id}}', {{this.quantity}} + 1)" {{#if (equals this.quantity this.product.stock)}}disabled{{/if}}>+</button>
                </div>
            </div>
        {{/each}}
        <div class="cart-total">
            <h3>Total: ${{cartTotal cart.products}}</h3>
        </div>
    {{else}}
        <p>Your cart is empty</p>
    {{/if}}
</div>

<style>
.cart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px;
    background-color: #f5f5f5;
    border-radius: 4px;
}

.cart-header-left {
    display: flex;
    align-items: center;
    gap: 15px;
}

.continue-shopping-btn {
    background-color: #4CAF50;
    color: white;
    text-decoration: none;
    padding: 8px 16px;
    border-radius: 4px;
    font-size: 0.9em;
    display: inline-flex;
    align-items: center;
    transition: background-color 0.3s;
}

.continue-shopping-btn:hover {
    background-color: #45a049;
}

.cart-id-display {
    color: #666;
    font-size: 0.9em;
    padding: 5px 10px;
    background-color: white;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.empty-cart-btn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9em;
}

.empty-cart-btn:hover {
    background-color: #c82333;
}
</style>

<script>
function showError(message) {
    const errorDiv = document.getElementById('error-message');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
    setTimeout(() => {
        errorDiv.style.display = 'none';
    }, 3000);
}

function removeFromCart(productId) {
    const cartId = document.getElementById('cartId').value;
    fetch(`/api/carts/${cartId}/product/${productId}`, {
        method: 'DELETE'
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error);
            });
        }
        window.location.reload();
    })
    .catch(error => showError(error.message || 'Error removing item from cart'));
}

function updateQuantity(productId, newQuantity) {
    if (newQuantity < 1) return;
    
    const cartId = document.getElementById('cartId').value;
    fetch(`/api/carts/${cartId}/product/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ quantity: newQuantity })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error);
            });
        }
        return response.json();
    })
    .then(() => {
        window.location.reload();
    })
    .catch(error => showError(error.message || 'Error updating quantity'));
}

function emptyCart(cartId) {
    if (!confirm('Are you sure you want to empty your cart? This action cannot be undone.')) {
        return;
    }

    fetch(`/api/carts/${cartId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ products: [] })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error);
            });
        }
        window.location.reload();
    })
    .catch(error => showError(error.message || 'Error emptying cart'));
}
</script> 