<link rel="stylesheet" href="/css/style.css">

<style>
.add-to-cart-btn:disabled {
    background-color: #cccccc;
    color: #666666;
    cursor: not-allowed;
    opacity: 0.7;
    border: 1px solid #999999;
}

.success-message {
    background-color: #4CAF50;
    color: white;
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
    text-align: center;
    display: none;
}

.cart-controls {
    text-align: right;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 15px;
}

.check-cart-btn {
    background-color: #2196F3;
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 4px;
    display: inline-block;
}

.check-cart-btn:hover {
    background-color: #1976D2;
}

.cart-id-display {
    color: #666;
    font-size: 0.9em;
    padding: 5px 10px;
    background-color: #f5f5f5;
    border-radius: 4px;
    border: 1px solid #ddd;
}
</style>

<h1>{{title}}</h1>

<div id="success-message" class="success-message" style="display: none;"></div>

<div class="controls-container">
    <div class="cart-controls">
        <span id="cartIdDisplay" class="cart-id-display"></span>
        <a href="#" id="checkCartBtn" class="check-cart-btn">Check Cart</a>
    </div>
    <!-- Filters -->
    <div class="filters">
        <h3>Filters</h3>
        <form id="filterForm" method="GET">
            <div class="filter-group">
                <label for="category">Category:</label>
                <select name="category" id="category">
                    <option value="">All Categories</option>
                    {{#each filters.categories}}
                        <option value="{{this}}" {{#if (equals this ../filters.currentCategory)}}selected{{/if}}>{{this}}</option>
                    {{/each}}
                </select>
            </div>

            <div class="filter-group">
                <label for="minPrice">Min Price:</label>
                <input type="number" name="minPrice" id="minPrice" value="{{filters.minPrice}}">
            </div>

            <div class="filter-group">
                <label for="maxPrice">Max Price:</label>
                <input type="number" name="maxPrice" id="maxPrice" value="{{filters.maxPrice}}">
            </div>

            <div class="filter-group">
                <label for="stock">Stock:</label>
                <select name="stock" id="stock">
                    <option value="">All</option>
                    <option value="available" {{#if (equals filters.stock "available")}}selected{{/if}}>In Stock</option>
                </select>
            </div>

            <div class="filter-group">
                <label for="status">Status:</label>
                <select name="status" id="status">
                    <option value="">All</option>
                    <option value="true" {{#if (equals filters.status "true")}}selected{{/if}}>Active</option>
                    <option value="false" {{#if (equals filters.status "false")}}selected{{/if}}>Inactive</option>
                </select>
            </div>

            <!-- Sorting -->
            <div class="filter-group">
                <label for="sort">Sort By:</label>
                <select name="sort" id="sort">
                    <option value="title" {{#if (equals sorting.field "title")}}selected{{/if}}>Title</option>
                    <option value="price" {{#if (equals sorting.field "price")}}selected{{/if}}>Price</option>
                    <option value="stock" {{#if (equals sorting.field "stock")}}selected{{/if}}>Stock</option>
                </select>
                <select name="order" id="order">
                    <option value="asc" {{#if (equals sorting.order "asc")}}selected{{/if}}>Ascending</option>
                    <option value="desc" {{#if (equals sorting.order "desc")}}selected{{/if}}>Descending</option>
                </select>
            </div>

            <button type="submit" class="apply-filters-btn">Apply Filters</button>
            <button type="button" class="clear-filters-btn" onclick="clearFilters()">Clear Filters</button>
        </form>
    </div>
</div>

<div class="products-container">
    {{#each productos}}
        <div class="product-card">
            <h3>{{this.title}}</h3>
            <p>Code: {{this.code}}</p>
            <p>Description: {{this.description}}</p>
            <p class="price">Price: ${{this.price}}</p>
            <p>Status: {{this.status}}</p>
            <p class="stock">Stock: {{#if this.stock}}{{this.stock}}{{else}}0{{/if}}</p>
            <p class="category">Category: {{this.category}}</p>
            <p>Thumbnails: {{this.thumbnails}}</p>
            <button onclick="handleProductClick('{{this._id}}', {{#if this.stock}}{{this.stock}}{{else}}0{{/if}}, '{{this.title}}')" 
                    class="add-to-cart-btn" 
                    {{#unless this.stock}}disabled{{/unless}}>
                {{#if this.stock}}Add to Cart{{else}}Out of Stock{{/if}}
            </button>
        </div>
    {{/each}}
</div>

<!-- Pagination -->
{{#if pagination}}
<div class="pagination">
    {{#if pagination.hasPrevPage}}
        <a href="?page={{pagination.prevPage}}&limit={{limit}}&sort={{sorting.field}}&order={{sorting.order}}" class="page-link">&laquo; Previous</a>
    {{/if}}
    
    <span class="page-info">
        Page {{pagination.currentPage}} of {{pagination.totalPages}}
        ({{pagination.totalProducts}} products)
    </span>

    {{#if pagination.hasNextPage}}
        <a href="?page={{pagination.nextPage}}&limit={{limit}}&sort={{sorting.field}}&order={{sorting.order}}" class="page-link">Next &raquo;</a>
    {{/if}}
</div>
{{/if}}

<script>
function showSuccess(message) {
    const successDiv = document.getElementById('success-message');
    successDiv.textContent = message;
    successDiv.style.display = 'block';
    setTimeout(() => {
        successDiv.style.display = 'none';
    }, 3000);
}

function handleProductClick(productId, stock, title) {
    // Convert stock to number and handle undefined/null
    stock = Number(stock) || 0;
    
    if (stock < 1) {
        alert(`Sorry, "${title}" cannot be added to cart - Product is out of stock`);
        return;
    }

    addToCart(productId, stock, title);
}

async function addToCart(productId, stock, title) {
    try {
        // First, try to find an existing cart or create a new one
        const cartResponse = await fetch('/api/carts', {
            method: 'POST'
        });

        if (!cartResponse.ok) {
            throw new Error('Error creating/getting cart');
        }

        const cart = await cartResponse.json();
        
        // Update cart ID display
        document.getElementById('cartIdDisplay').textContent = `Cart ID: ${cart._id}`;
        
        // Now add the product to the cart
        const response = await fetch(`/api/carts/${cart._id}/product/${productId}`, {
            method: 'POST'
        });

        if (response.ok) {
            showSuccess(`"${title}" added to cart successfully!`);
        } else {
            const error = await response.json();
            alert(error.error || 'Error adding product to cart');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error adding product to cart');
    }
}

// Function to get and display current cart ID on page load
async function displayCurrentCartId() {
    try {
        const response = await fetch('/api/carts', {
            method: 'POST'  // This will get existing cart or create new one
        });
        
        if (response.ok) {
            const cart = await response.json();
            document.getElementById('cartIdDisplay').textContent = `Cart ID: ${cart._id}`;
            // Update Check Cart button href
            document.getElementById('checkCartBtn').href = `/api/carts/${cart._id}`;
        }
    } catch (error) {
        console.error('Error getting cart ID:', error);
    }
}

function clearFilters() {
    document.getElementById('category').value = '';
    document.getElementById('minPrice').value = '';
    document.getElementById('maxPrice').value = '';
    document.getElementById('stock').value = '';
    document.getElementById('status').value = '';
    document.getElementById('sort').value = 'title';
    document.getElementById('order').value = 'asc';
    document.getElementById('filterForm').submit();
}

// Call this when page loads
document.addEventListener('DOMContentLoaded', function() {
    displayCurrentCartId();
    
    // Existing pagination code
    const paginationLinks = document.querySelectorAll('.pagination a');
    paginationLinks.forEach(link => {
        const url = new URL(link.href);
        const currentUrl = new URL(window.location.href);
        
        // Copy current filter parameters
        ['category', 'minPrice', 'maxPrice', 'stock', 'status', 'sort', 'order'].forEach(param => {
            const value = currentUrl.searchParams.get(param);
            if (value) {
                url.searchParams.set(param, value);
            }
        });
        
        link.href = url.toString();
    });
});
</script>